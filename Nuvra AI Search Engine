<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Nuvra</title>
  <style>
    :root {
      --light-bg: #f5f9f9;
      --dark-bg: #0b0b0b;
      --light-text: #000;
      --dark-text: #fff;
      --accent: #e9f9f8;
      --accent-blue: #a5e1e1;
    }

    body {
      margin: 0;
      font-family: 'Poppins', sans-serif;
      background-color: var(--light-bg);
      color: var(--light-text);
      display: flex;
      flex-direction: column;
      align-items: center;
      height: 100vh;
      transition: 0.3s ease;
    }

    .browser-bar {
      display: flex;
      align-items: center;
      justify-content: center;
      background: #000;
      color: #fff;
      width: 100%;
      padding: 0.5rem 1rem;
      gap: 1rem;
    }

    .tab {
      background: var(--accent);
      color: #000;
      padding: 0.5rem 1.5rem;
      border-radius: 15px;
      font-size: 14px;
      font-weight: 500;
    }

    .controls {
      display: flex;
      align-items: center;
      gap: 1rem;
      background: #000;
      width: 100%;
      padding: 0.4rem 1rem;
      color: #fff;
    }

    .controls span {
      cursor: pointer;
      font-size: 1.2rem;
    }

    .logo {
      font-family: 'Courier New', monospace;
      font-size: 3.5rem;
      font-weight: 900;
      letter-spacing: 0.1em;
      margin: 3rem 0 2rem 0;
    }

    .search-bar {
      display: flex;
      align-items: center;
      width: 60%;
      max-width: 700px;
      background: #000;
      border-radius: 40px;
      padding: 0.8rem 1.2rem;
    }

    .search-bar input {
      flex: 1;
      border: none;
      outline: none;
      background: transparent;
      color: #fff;
      font-size: 1rem;
      padding: 0 0.5rem;
    }

    .search-bar i {
      font-size: 1.2rem;
      color: #fff;
    }

    .profile {
      position: absolute;
      right: 2rem;
      top: 2rem;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: #dfe3e7;
    }

    .mode-toggle {
      position: fixed;
      bottom: 20px;
      right: 90px;
      background: #000;
      color: #fff;
      border: none;
      border-radius: 20px;
      padding: 0.5rem 1rem;
      cursor: pointer;
      font-size: 14px;
      transition: 0.3s ease;
    }

    .dark-mode {
      background-color: var(--dark-bg);
      color: var(--dark-text);
    }

    .dark-mode .browser-bar,
    .dark-mode .controls,
    .dark-mode .search-bar {
      background: #fff;
      color: #000;
    }

    .dark-mode .search-bar input,
    .dark-mode .search-bar i {
      color: #000;
    }

    .dark-mode .mode-toggle {
      background: #fff;
      color: #000;
    }

    /* Nuvra Spark Assistant */
    .spark-bubble {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #000;
      color: #fff;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.8rem;
      cursor: pointer;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
      transition: all 0.3s ease;
    }

    .spark-bubble:hover {
      background: var(--accent-blue);
      color: #000;
      transform: scale(1.05);
    }

    .spark-chat {
      position: fixed;
      bottom: 90px;
      right: 20px;
      width: 320px;
      height: 420px;
      background: #fff;
      color: #000;
      border-radius: 15px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      display: none;
      flex-direction: column;
      overflow: hidden;
    }

    .spark-header {
      background: #000;
      color: #fff;
      padding: 0.7rem 1rem;
      font-weight: bold;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .spark-messages {
      flex: 1;
      padding: 1rem;
      overflow-y: auto;
      font-size: 0.9rem;
    }

    .spark-input {
      display: flex;
      border-top: 1px solid #ccc;
    }

    .spark-input input {
      flex: 1;
      border: none;
      padding: 0.7rem;
      font-size: 0.9rem;
      outline: none;
    }

    .spark-input button {
      background: #000;
      color: #fff;
      border: none;
      padding: 0.7rem 1rem;
      cursor: pointer;
    }

    .message {
      margin: 0.4rem 0;
    }

    .user {
      text-align: right;
      color: #333;
    }

    .ai {
      text-align: left;
      color: #000;
    }

  </style>
</head>
<body>

  <div class="browser-bar">
    <div class="tab">www.site.com</div>
    <div class="tab">www.site.com</div>
  </div>

  <div class="controls">
    <span>‚¨ÖÔ∏è</span>
    <span>‚û°Ô∏è</span>
    <span>üîÑ</span>
  </div>

  <div class="profile"></div>

  <div class="logo">NUVRA</div>

  <div class="search-bar">
    <i>üîç</i>
    <input type="text" placeholder="Search with Nuvra...">
  </div>

  <button class="mode-toggle" onclick="toggleMode()">Toggle Mode</button>

  <!-- Nuvra Spark Assistant -->
  <div class="spark-bubble" onclick="toggleSpark()">‚ö°</div>

  <div class="spark-chat" id="sparkChat">
    <div class="spark-header">
      Nuvra Spark
      <span style="cursor:pointer;" onclick="toggleSpark()">‚úñ</span>
    </div>
    <div class="spark-messages" id="sparkMessages">
      <div class="message ai">Hi! I‚Äôm Nuvra Spark ‚ö° ‚Äî your assistant. How can I help?</div>
    </div>
    <div class="spark-input">
      <input type="text" id="sparkInput" placeholder="Ask me anything...">
      <button onclick="sendSpark()">Send</button>
    </div>
  </div>

  <script>
    function toggleMode() {
      document.body.classList.toggle("dark-mode");
    }

    function toggleSpark() {
      const chat = document.getElementById("sparkChat");
      chat.style.display = chat.style.display === "flex" ? "none" : "flex";
    }

    function sendSpark() {
      const input = document.getElementById("sparkInput");
      const messages = document.getElementById("sparkMessages");
      const userMessage = input.value.trim();
      if (!userMessage) return;

      // Add user message
      const userDiv = document.createElement("div");
      userDiv.classList.add("message", "user");
      userDiv.textContent = userMessage;
      messages.appendChild(userDiv);

      // AI reply (placeholder logic)
      const aiDiv = document.createElement("div");
      aiDiv.classList.add("message", "ai");
      aiDiv.textContent = "Spark: I'm thinking about that... (AI logic coming soon)";
      messages.appendChild(aiDiv);

      input.value = "";
      messages.scrollTop = messages.scrollHeight;
    }
  </script>
// server.js
import express from "express";
import fetch from "node-fetch";
import cors from "cors";

const app = express();
app.use(cors());
app.use(express.json());

app.post("/spark", async (req, res) => {
  const { message } = req.body;

  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`
    },
    body: JSON.stringify({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: "You are Nuvra Spark, a friendly AI assistant built into the Nuvra ecosystem. Answer clearly and visually when possible." },
        { role: "user", content: message }
      ]
    })
  });

  const data = await response.json();
  res.json({ reply: data.choices[0].message.content });
});

app.listen(3000, () => console.log("‚úÖ Spark backend running on http://localhost:3000"));
npm init -y
npm install express node-fetch cors
export OPENAI_API_KEY=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
node server.js

</body>
</html>
